1. class: A class is a blueprint or template for creating objects (instances). It defines the properties (attributes) and behaviors (methods) that the objects of that class will have.

Attributes: Variables that define the state or characteristics of the class.
Methods: Functions that define the behavior of the class.
Constructor: A special method used to initialize objects of the class.
Key Points:

A class is not a real object, but a definition of how objects of that type will behave.
A class can have fields (variables) and methods (functions).
A class is created using the class keyword in Java.


2. Object:
An object is an instance of a class. When a class is defined, no memory is allocated until an object of that class is created. An object is a real entity that has attributes (state) and methods (behavior).

Objects are created using the new keyword followed by a constructor.
Key Points:

An object has state (its data) and behavior (methods).
Objects are created based on the blueprint provided by the class.

3. Encapsulation
Encapsulation is the process of wrapping data (variables) and code (methods) together into a single unit known as a class. It also involves restricting direct access to some of the object's components and only allowing access via getter and setter methods.

Key Points:
Private access modifiers to restrict direct access to fields.
Public getter and setter methods to provide controlled access.


4. Inheritance
Inheritance is a mechanism where one class acquires the properties and behaviors (fields and methods) of another class. It promotes code reusability.

Key Points:
The class that inherits is called the subclass.
The class from which properties are inherited is called the superclass.
Java uses the extends keyword for inheritance.

types: Single Inheritance
Multilevel Inheritance
Hierarchical Inheritance
Multiple Inheritance (through interfaces)


 Single Inheritance
Single inheritance occurs when a class inherits from only one superclass. It’s the most straightforward form of inheritance, where a subclass derives properties and behaviors from a single parent class.
Dog class inherits the eat() method from the Animal class, which is an example of single inheritance because Dog only extends one class (Animal).

Multilevel Inheritance
Multilevel inheritance is when a class inherits from a class that already has inherited from another class. This creates a chain of inheritance.
Dog inherits from Mammal, and Mammal inherits from Animal.
This forms a chain of inheritance: Animal → Mammal → Dog.
This is called multilevel inheritance because it involves more than one level of inheritance.

Hierarchical Inheritance
Hierarchical inheritance occurs when multiple classes inherit from a single superclass. In this case, a common parent class is shared by multiple child classes.
Both Dog and Cat inherit from the same parent class Animal.
This is an example of hierarchical inheritance, where multiple subclasses (Dog, Cat) inherit from a single superclass (Animal).


Multiple Inheritance (through Interfaces)
Java does not support multiple inheritance directly (where a class can inherit from more than one class) because it can lead to ambiguity issues. However, Java allows multiple inheritance through interfaces.

An interface is a contract that can be implemented by any class, and a class can implement multiple interfaces. This allows a form of multiple inheritance.
The Dog class implements two interfaces: Animal and Pet.
This allows the Dog class to inherit behaviors from both interfaces, which is an example of multiple inheritance in Java via interfaces.



Summary of Inheritance Types:
Inheritance                                             Type	                                                                                                   Description	Example
Single Inheritance	                         A class inherits from a single superclass.	                                                                       class Dog extends Animal
Multilevel Inheritance                     	A class inherits from a class that has already inherited from another class.	                                   class Dog extends Mammal, class Mammal extends Animal
Hierarchical Inheritance	                  Multiple classes inherit from a single superclass.	                                                           class Dog extends Animal, class Cat extends Animal
Multiple Inheritance (Interfaces)	         A class implements more than one interface. Java allows this via interfaces, not direct class inheritance.	        class Dog implements Animal, Pet




5.  Polymorphism
Polymorphism means "many forms" and allows methods to do different things based on the object they are acting upon. it is a process that performs a single action in different ways. There are two types:

Compile-time Polymorphism (Method Overloading)
Runtime Polymorphism (Method Overriding)
Compile-time Polymorphism (Method Overloading)
This is achieved by having multiple methods with the same name but different parameters.
Runtime Polymorphism (Method Overriding)
This occurs when a subclass provides a specific implementation for a method that is already defined in its superclass.



6. Abstraction
Abstraction is the process of hiding the implementation details and showing only the essential features of the object. It can be achieved using abstract classes and interfaces.

Key Points:
Abstract class can have both abstract (no implementation) and concrete (with implementation) methods.
Interface can have only abstract methods (until Java 8, after which default methods are allowed)



7. Association
Association defines how one object is related to another. In Java, this can be represented in the following ways:

One-to-One
One-to-Many
Many-to-Many


8. Constructor
A constructor is a special method used to initialize objects. It is called when an object is instantiated. Constructors can be default or parameterized.

Key Points:
Default constructor is provided automatically if no constructors are defined.
Parameterized constructor takes arguments for initialization.
